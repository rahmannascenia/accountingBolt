import React, { useState, useEffect } from 'react';
import { BookOpen, Plus, Eye, Filter, Calendar, FileText, AlertCircle } from 'lucide-react';
import { supabase } from '../../lib/supabase';

interface JournalEntry {
  id: string;
  entry_number: string;
  date: string;
  description: string;
  reference: string | null;
  total_debit: number;
  total_credit: number;
  status: 'draft' | 'posted';
  entry_type: string | null;
  source_document_type: string | null;
  source_document_id: string | null;
  is_auto_generated: boolean;
  created_at: string;
  updated_at: string;
  journal_entry_lines: JournalEntryLine[];
}

interface JournalEntryLine {
  id: string;
  account_code: string | null;
  account_name: string;
  account_type: 'asset' | 'liability' | 'equity' | 'revenue' | 'expense';
  debit_amount: number;
  credit_amount: number;
  bdt_debit_amount: number;
  bdt_credit_amount: number;
  original_currency: string | null;
  original_amount: number | null;
  fx_rate: number | null;
  description: string | null;
}

interface AutoJournalManagementProps {
  onNavigate: (page: string) => void;
}

export function AutoJournalManagement({ onNavigate }: AutoJournalManagementProps) {
  const [journalEntries, setJournalEntries] = useState<JournalEntry[]>([]);
  const [selectedEntry, setSelectedEntry] = useState<JournalEntry | null>(null);
  const [showDetails, setShowDetails] = useState(false);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    startDate: '',
    endDate: '',
    entryType: '',
    status: '',
    search: '',
  });

  useEffect(() => {
    loadJournalEntries();
  }, [filters]);

  const loadJournalEntries = async () => {
    setLoading(true);
    try {
      let query = supabase
        .from('journal_entries')
        .select(`
          *,
          journal_entry_lines(*)
        `)
        .order('created_at', { ascending: false });

      // Apply filters
      if (filters.startDate) {
        query = query.gte('date', filters.startDate);
      }
      if (filters.endDate) {
        query = query.lte('date', filters.endDate);
      }
      if (filters.entryType) {
        query = query.eq('entry_type', filters.entryType);
      }
      if (filters.status) {
        query = query.eq('status', filters.status);
      }

      const { data } = await query;

      if (data) {
        let filteredData = data;
        
        // Apply search filter
        if (filters.search) {
          const searchLower = filters.search.toLowerCase();
          filteredData = data.filter(entry => 
            entry.entry_number.toLowerCase().includes(searchLower) ||
            entry.description.toLowerCase().includes(searchLower) ||
            entry.reference?.toLowerCase().includes(searchLower)
          );
        }

        setJournalEntries(filteredData);
      }
    } catch (error) {
      console.error('Error loading journal entries:', error);
    } finally {
      setLoading(false);
    }
  };

  const viewDetails = (entry: JournalEntry) => {
    setSelectedEntry(entry);
    setShowDetails(true);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'posted': return 'bg-green-100 text-green-800';
      case 'draft': return 'bg-yellow-100 text-yellow-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getTypeColor = (type: string | null, isAutoGenerated: boolean) => {
    if (isAutoGenerated) {
      return 'bg-blue-100 text-blue-800';
    }
    switch (type) {
      case 'invoice': return 'bg-purple-100 text-purple-800';
      case 'payment': return 'bg-green-100 text-green-800';
      case 'expense': return 'bg-orange-100 text-orange-800';
      case 'manual': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getTypeLabel = (entry: JournalEntry) => {
    if (entry.is_auto_generated) {
      return 'Auto';
    }
    if (entry.entry_type) {
      return entry.entry_type.charAt(0).toUpperCase() + entry.entry_type.slice(1);
    }
    if (entry.source_document_type) {
      return entry.source_document_type.charAt(0).toUpperCase() + entry.source_document_type.slice(1);
    }
    return 'Manual';
  };

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mb-6"></div>
          <div className="space-y-4">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="h-16 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div className="flex items-center space-x-3">
          <BookOpen className="h-8 w-8 text-blue-600" />
          <h2 className="text-2xl font-bold text-gray-900">All Journals</h2>
        </div>
        <button
          onClick={() => onNavigate('manual-journal')}
          className="flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
        >
          <Plus className="h-4 w-4" />
          <span>Add Manual Entry</span>
        </button>
      </div>

      {/* Filters */}
      <div className="bg-gray-50 p-4 rounded-lg">
        <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
            <input
              type="date"
              value={filters.startDate}
              onChange={(e) => setFilters({ ...filters, startDate: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">End Date</label>
            <input
              type="date"
              value={filters.endDate}
              onChange={(e) => setFilters({ ...filters, endDate: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Entry Type</label>
            <select
              value={filters.entryType}
              onChange={(e) => setFilters({ ...filters, entryType: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">All Types</option>
              <option value="auto">Auto-Generated</option>
              <option value="manual">Manual</option>
              <option value="invoice">Invoice</option>
              <option value="payment">Payment</option>
              <option value="expense">Expense</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
            <select
              value={filters.status}
              onChange={(e) => setFilters({ ...filters, status: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">All Statuses</option>
              <option value="draft">Draft</option>
              <option value="posted">Posted</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Search</label>
            <input
              type="text"
              value={filters.search}
              onChange={(e) => setFilters({ ...filters, search: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Search entries..."
            />
          </div>
        </div>
      </div>

      {/* Journal Entries Table */}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Entry Details
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Description
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Type
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Amount
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {journalEntries.map((entry) => (
                <tr key={entry.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div>
                      <div className="text-sm font-medium text-gray-900">{entry.entry_number}</div>
                      <div className="text-sm text-gray-500">{entry.date}</div>
                      {entry.reference && (
                        <div className="text-sm text-blue-600">{entry.reference}</div>
                      )}
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <div className="text-sm text-gray-900">{entry.description}</div>
                    <div className="text-xs text-gray-500 mt-1">
                      {entry.journal_entry_lines?.slice(0, 2).map((line, index) => (
                        <div key={index}>
                          {line.account_name}: 
                          {line.debit_amount > 0 && ` Dr ${line.debit_amount.toFixed(2)}`}
                          {line.credit_amount > 0 && ` Cr ${line.credit_amount.toFixed(2)}`}
                        </div>
                      ))}
                      {entry.journal_entry_lines && entry.journal_entry_lines.length > 2 && (
                        <div className="text-gray-400">
                          +{entry.journal_entry_lines.length - 2} more lines
                        </div>
                      )}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getTypeColor(entry.entry_type, entry.is_auto_generated)}`}>
                      {getTypeLabel(entry)}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    BDT {entry.total_debit.toFixed(2)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(entry.status)}`}>
                      {entry.status}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button
                      onClick={() => viewDetails(entry)}
                      className="text-blue-600 hover:text-blue-900 p-1"
                      title="View details"
                    >
                      <Eye className="h-4 w-4" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Details Modal */}
      {showDetails && selectedEntry && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-hidden">
            <div className="px-6 py-4 bg-gray-50 border-b flex justify-between items-center">
              <h3 className="text-lg font-semibold">
                Journal Entry Details - {selectedEntry.entry_number}
              </h3>
              <button
                onClick={() => setShowDetails(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <span className="sr-only">Close</span>
                <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            <div className="p-6 overflow-auto max-h-[calc(90vh-120px)]">
              <div className="space-y-6">
                {/* Basic Information */}
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Entry Number</label>
                    <p className="text-sm text-gray-900">{selectedEntry.entry_number}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Date</label>
                    <p className="text-sm text-gray-900">{selectedEntry.date}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Status</label>
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(selectedEntry.status)}`}>
                      {selectedEntry.status}
                    </span>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Type</label>
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getTypeColor(selectedEntry.entry_type, selectedEntry.is_auto_generated)}`}>
                      {getTypeLabel(selectedEntry)}
                    </span>
                  </div>
                  {selectedEntry.reference && (
                    <div className="col-span-2">
                      <label className="block text-sm font-medium text-gray-700">Reference</label>
                      <p className="text-sm text-gray-900">{selectedEntry.reference}</p>
                    </div>
                  )}
                </div>

                {/* Description */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                  <p className="text-sm text-gray-900 bg-gray-50 p-3 rounded">{selectedEntry.description}</p>
                </div>

                {/* Journal Entry Lines */}
                <div>
                  <h4 className="text-md font-semibold text-gray-900 mb-3">Journal Entry Lines</h4>
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Account
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Description
                          </th>
                          <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Debit
                          </th>
                          <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Credit
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {selectedEntry.journal_entry_lines?.map((line) => (
                          <tr key={line.id} className="hover:bg-gray-50">
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div>
                                <div className="text-sm font-medium text-gray-900">{line.account_name}</div>
                                {line.account_code && (
                                  <div className="text-sm text-gray-500">({line.account_code})</div>
                                )}
                              </div>
                            </td>
                            <td className="px-6 py-4 text-sm text-gray-900">
                              {line.description || '-'}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900">
                              {line.debit_amount > 0 ? line.debit_amount.toLocaleString() : '-'}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-right text-sm text-gray-900">
                              {line.credit_amount > 0 ? line.credit_amount.toLocaleString() : '-'}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                      <tfoot className="bg-gray-100">
                        <tr>
                          <td colSpan={2} className="px-6 py-3 text-sm font-medium text-gray-900">
                            TOTALS
                          </td>
                          <td className="px-6 py-3 text-right text-sm font-bold text-gray-900">
                            {selectedEntry.total_debit.toLocaleString()}
                          </td>
                          <td className="px-6 py-3 text-right text-sm font-bold text-gray-900">
                            {selectedEntry.total_credit.toLocaleString()}
                          </td>
                        </tr>
                      </tfoot>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {journalEntries.length === 0 && (
        <div className="text-center py-12 bg-white rounded-lg shadow">
          <BookOpen className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No journal entries found</h3>
          <p className="text-gray-500 mb-4">
            No journal entries match your current filters.
          </p>
          <button
            onClick={() => onNavigate('manual-journal')}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
          >
            Create Manual Entry
          </button>
        </div>
      )}
    </div>
  );
}